mod! MULTISET(E :: TRIV) {
    [Elt.E < MSet]
    op emp : -> MSet {constr} .
    op _ _ : MSet MSet -> MSet {constr assoc comm id: emp} .
}

mod! PROB principal-sort Prob {
    pr(NAT) .
    pr(BOOL) .
    [Prob]
    
    op prob : Nat -> Prob {constr} .

    op _<_ : Prob Prob -> Bool .
    op _<=_ : Prob Prob -> Bool .
    op _>_ : Prob Prob -> Bool .
    op _>=_ : Prob Prob -> Bool .
    op _==_ : Prob Prob -> Bool .

    vars N M : Nat .

    eq prob(N) < prob(M) = (N < M) .
    eq prob(N) <= prob(M) = (N <= M) .
    eq prob(N) > prob(M) = (N > M) .
    eq prob(N) >= prob(M) = (N >= M) .
    eq prob(N) == prob(M) = (N == M) .

    op isProbInRange : Prob Prob -> Bool .

    vars X Y : Nat .
    eq isProbInRange(prob(X), prob(Y)) = ((X >= 0) and (X <= Y)) .
}

mod! WORKER-ID {
    pr(NAT)
    [WorkerId]
    op (worker:_) : Nat -> WorkerId {constr} .
    op nilWorker : -> WorkerId .
}

mod! ASSEMBLY-PROCESS {
    protecting(NAT)
    [AssemblyProcess] 
    op (phase:_,sub:_) : Nat Nat -> AssemblyProcess {constr} .
}

-- Worker Mode

mod! WORKER-IDELING principal-sort WorkerIdeling {
    [WorkerIdeling]
    op ideling : -> WorkerIdeling {constr} .
}

mod! WORKER-ASSEMBLING principal-sort WorkerAssembling {
    [WorkerAssembling]
    op assembling : -> WorkerAssembling {constr} .
}

mod! WORKER-ASSEMBLING-LOCKED principal-sort WorkerAssemblingLocked {
    [WorkerAssemblingLocked]
    op assemblingLocked : -> WorkerAssemblingLocked {constr} .
}

mod! WORKER-ENGAGING principal-sort WorkerEngaging {
    [WorkerEngaging]
    op engaging : -> WorkerEngaging {constr} .
}

mod! WORKER-TALKING principal-sort WorkerTalking {
    [WorkerTalking]
    op talking : -> WorkerTalking {constr} .
}

mod! WORKER-QUERYING principal-sort WorkerQuerying {
    [WorkerQuerying]
    op querying : -> WorkerQuerying {constr} .
}

mod! WORKER-STRUGGLING principal-sort WorkerStruggling {
    [WorkerStruggling]
    op struggling : -> WorkerStruggling {constr} .
}

mod! WORKER-ASSEMBLED principal-sort WorkerAssembled {
    [WorkerAssembled]
    op assembled : -> WorkerAssembled {constr} .
}

mod! WORKER-FULLY-ASSEMBLED principal-sort WorkerFullyAssembled {
    [WorkerFullyAssembled]
    op fullyAssembled : -> WorkerFullyAssembled {constr} .
}

mod! WORKER-ERROR principal-sort WorkerError {
    [WorkerError]
    op workerError : -> WorkerError {constr} .
}

mod! WORKER-MODE principal-sort WorkerMode {
    protecting(WORKER-IDELING)
    protecting(WORKER-ASSEMBLING)
    protecting(WORKER-ASSEMBLING-LOCKED)
    protecting(WORKER-ENGAGING)
    protecting(WORKER-TALKING)
    protecting(WORKER-QUERYING)
    protecting(WORKER-STRUGGLING)
    protecting(WORKER-ASSEMBLED)
    protecting(WORKER-FULLY-ASSEMBLED)
    protecting(WORKER-ERROR)

    [WorkerIdeling WorkerAssembling WorkerAssemblingLocked WorkerEngaging WorkerTalking WorkerQuerying WorkerStruggling WorkerAssembled WorkerFullyAssembled WorkerError < WorkerMode]

    -- op transition(_,_) : WorkerMode WorkerMode -> WorkerMode .
    -- op permittedTransition(_,_) : WorkerMode WorkerMode -> Bool .

    vars WMS WMD : WorkerMode .
    var WI : WorkerIdeling .
    var WAG : WorkerAssembling .
    var WAL : WorkerAssemblingLocked .
    var WE : WorkerEngaging .
    var WT : WorkerTalking .
    var WQ : WorkerQuerying .
    var WS : WorkerStruggling .
    var WAD : WorkerAssembled .
    var WAF : WorkerFullyAssembled .
    var WErr : WorkerError .

    -- ceq transition(WMS, WMD) = WErr if not(permittedTransition(WMS, WMD)) .
    -- eq permittedTransition(WI, WAG) = true .
}

-- User Command

mod! USER-COMMAND-IDLE principal-sort UserIdle {
    [UserIdle]
    op idle : -> UserIdle {constr} .
}

mod! USER-COMMAND-SPEAK principal-sort UserSpeak {
    [UserSpeak]
    op speak : -> UserSpeak {constr} .
}

mod! USER-COMMAND-CLARIFY principal-sort UserClarify {
    [UserClarify]
    op clarify : -> UserClarify {constr} .
}

mod! USER-COMMAND-EXIT principal-sort UserExit {
    [UserExit]
    op exit : -> UserExit {constr} .
}

mod! USER-COMMAND principal-sort UserCommand {
    protecting(USER-COMMAND-IDLE)
    protecting(USER-COMMAND-SPEAK)
    protecting(USER-COMMAND-CLARIFY)
    protecting(USER-COMMAND-EXIT)

    [UserIdle UserSpeak UserClarify UserExit < UserCommand]
}

-- observable

mod! OBSERVABLE-COMPONENT principal-sort OComp {
    protecting(WORKER-ID)
    protecting(ASSEMBLY-PROCESS)
    protecting(WORKER-MODE)

    [OComp]
    op _,_,_ : WorkerId AssemblyProcess WorkerMode -> OComp {constr} .
}

mod! STATE {
    pr(MULTISET(OBSERVABLE-COMPONENT) * {
        sort MSet -> OComps
    })
    
    [State]
    op {_} : OComps -> State {constr} .
}

mod! TARGETED-USER-COMMAND {
    pr(WORKER-ID)
    pr(USER-COMMAND)
    [TargetedUserCommand]
    op (_,_) : WorkerId UserCommand -> TargetedUserCommand {constr} .
}

mod! OCOMP-UPDATE {
    protecting(OBSERVABLE-COMPONENT)
    op updateOC : OComp WorkerMode -> OComp .

    var W : WorkerId .
    var AP : AssemblyProcess .
    vars M M1 : WorkerMode .

    eq updateOC((W, AP, M), M1) = (W, AP, M1) .
}

mod! MODE-TRANS-RULE {
    protecting(BOOL)
    protecting(WORKER-MODE)

}

mod! MODE-UPDATE {
    protecting(WORKER-MODE)
    protecting(USER-COMMAND)

    op updateMode : UserCommand -> WorkerMode .

    var UC : UserCommand .
    var M : WorkerMode .
    var MI : WorkerIdeling .
    var MA : WorkerAssembling .
    var MAL : WorkerAssemblingLocked .

    eq updateMode(UC) = M .
    -- eq updateMode()
}

mod! SIM-STATE-TRANS {
    pr(STATE)
    vars W W1 W2 W3 : WorkerId .

    -- trans [asem] : {()} => {}
}

-- verify

open PROB .
    red prob(50) == prob(50) .
    red prob(30) >= prob(70) .
    red isProbInRange(prob(10), prob(90)) .
close

open WORKER-ID .
    red (worker: 1) .
close

open ASSEMBLY-PROCESS .
    red (phase: 1,sub: 1) .
close

open OBSERVABLE-COMPONENT .
    red ((worker: 1), (phase: 1, sub: 1), ideling) .
close

open STATE .
    red {((worker: 1), (phase: 1, sub: 1), ideling) ((worker: 2), (phase: 1, sub: 1), ideling) ((worker: 3), (phase: 1, sub: 1), ideling) } .
close

open TARGETED-USER-COMMAND .
    red ((worker: 1), speak) .
    red (nilWorker, idle) .
close

open OCOMP-UPDATE .
    red updateOC(((worker: 1), (phase: 1, sub: 1), struggling), querying) .
close

