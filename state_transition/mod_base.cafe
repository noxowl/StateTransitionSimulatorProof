mod! MULTISET(E :: TRIV) {
    [Elt.E < MSet]
    op emp : -> MSet {constr} .
    op _ _ : MSet MSet -> MSet {constr assoc comm id: emp} .
}

mod! PROB principal-sort Prob {
    pr(NAT) .
    pr(BOOL) .
    [Prob]
    
    op prob : Nat -> Prob {constr} .

    op _<_ : Prob Prob -> Bool .
    op _<=_ : Prob Prob -> Bool .
    op _>_ : Prob Prob -> Bool .
    op _>=_ : Prob Prob -> Bool .
    op _==_ : Prob Prob -> Bool .

    vars N M : Nat .

    eq prob(N) < prob(M) = (N < M) .
    eq prob(N) <= prob(M) = (N <= M) .
    eq prob(N) > prob(M) = (N > M) .
    eq prob(N) >= prob(M) = (N >= M) .
    eq prob(N) == prob(M) = (N == M) .

    op isProbInRange : Prob Prob -> Bool .

    vars X Y : Nat .
    eq isProbInRange(prob(X), prob(Y)) = ((X >= 0) and (X <= Y)) .
}

open PROB .
    red prob(50) == prob(50) .
    red prob(30) >= prob(70) .
    red isProbInRange(prob(10), prob(90)) .
close .

mod! WORKER-ID {
    pr(NAT)
    [WorkerId]
    op (worker:_) : Nat -> WorkerId {constr} .
    op nilWorker : -> WorkerId .
}

open WORKER-ID .
    red (worker: 1) .
close

mod! ASSEMBLY-PROCESS {
    pr(NAT)
    [AssemblyProcess] 
    op (phase:_,sub:_) : Nat Nat -> AssemblyProcess {constr} .
}

open ASSEMBLY-PROCESS .
    red (phase: 1,sub: 1) .
close

mod! MODE {
    [Mode]
    ops ideling assembling assemblingLocked engaging talking querying struggling assembled fullyAssembled : -> Mode {constr} .
}

mod! OBSERVABLE-COMPONENT principal-sort OComp {
    pr(WORKER-ID)
    pr(ASSEMBLY-PROCESS)
    pr(MODE)

    [OComp]
    op _,_,_ : WorkerId AssemblyProcess Mode -> OComp {constr} .
}

open OBSERVABLE-COMPONENT .
    red ((worker: 1), (phase: 1, sub: 1), ideling) .
close

mod! STATE {
    pr(MULTISET(OBSERVABLE-COMPONENT) * {
        sort MSet -> OComps
    })
    
    [State]
    op {_} : OComps -> State {constr} .
}

open STATE .
    red {((worker: 1), (phase: 1, sub: 1), ideling) ((worker: 2), (phase: 1, sub: 1), ideling) ((worker: 3), (phase: 1, sub: 1), ideling) } .
close

mod! USER-COMMAND {
    [UserCommand]
    ops idle speak clarify exit : -> UserCommand {constr} .
}

mod! TARGETED-USER-COMMAND {
    pr(WORKER-ID)
    pr(USER-COMMAND)
    [TargetedUserCommand]
    op (_,_) : WorkerId UserCommand -> TargetedUserCommand {constr} .
}

open TARGETED-USER-COMMAND .
    red ((worker: 1), speak) .
    red (nilWorker, idle) .
close

mod! SIM-STATE-TRANS {
    pr(STATE)
    vars W W1 W2 W3 : WorkerId .

    -- trans [asem] : {()} => {}
}
